// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('verifier');
const json = require("../../zokrates/proof.json");

contract('Verifier', accounts => {

    const account_one = accounts[0];
    // const account_two = accounts[1];
    // const account_three = accounts[2];

    describe('verify proofs', function () {
        beforeEach(async function () { 
            this.contract = await verifier.new({from: account_one});
        })
        
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('should verify proof, correct.', async function () {
            
            // console.log(json.inputs);
            // console.log(json.proof.a);
            // console.log(json.proof.b);
            // console.log(json.proof.c);
            
            let value = await this.contract.verifyTx.call(json.proof.a, json.proof.b, json.proof.c, json.inputs);
            // ASSERT
            assert.equal(value, true, "Incorrect proof.");
        })

        it('should verify proof, not correct', async function () {
            
            let value = await this.contract.verifyTx.call(json.proof.a, json.proof.b, json.proof.c, 
                    [
                    "0x0000000000000000000000000000000000000000000000000000000000000008",
                    "0x0000000000000000000000000000000000000000000000000000000000000001"
                  ]
                );

            // ASSERT
            assert.equal(value, false, "We could validate proof so there is an issue.");
        })

    });


})
    

